# -*- coding: utf-8 -*-
"""Medical_Appoinment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UVz0yWoUzz5OJymLaPd-XkAcQO3mJ1dB
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

# Load the data 
df = pd.read_csv('C:/Users/a/OneDrive/Desktop/student/New folder/noshowappointments-kagglev2-may-2016.csv')
df.head()

df.shape

df.describe()

df.info()

df_new = df.drop(['PatientId', 'AppointmentID'], axis = 1)
df_new.head(1)

df_new = df_new.drop(df_new.query('Age < 0').index)

df_new = df_new.drop(df_new.query('Handcap > 1').index)

df_new = df_new.rename(columns = {'No-show':'No_show'})

#0 for 'No', 1 for 'Yes'. 
#So, in our case, 0 stands for a person showed up, and 1 stands for a person did not show up.
noshow_dict = {'No':0, 'Yes':1}
df_new["No_show_new"] = df_new["No_show"].map(noshow_dict)
df_new.head()

type(df_new['AppointmentDay'][0])

#change appointment day's format
df_new['AppointmentDay'] = pd.to_datetime(df_new['AppointmentDay'].astype(str), format='%Y/%m/%d')
df_new['AppointmentDay'] = pd.DatetimeIndex(df_new.AppointmentDay).normalize()
df_new['AppointmentDay']

#change scheduled day's format
df_new['ScheduledDay'] = pd.to_datetime(df_new['ScheduledDay'].astype(str), format='%Y/%m/%d')
df_new['ScheduledDay'] = pd.DatetimeIndex(df_new.ScheduledDay).normalize()
df_new['ScheduledDay']

#create a new column awaiting_time with the difference between appointment day and scheduled day
df_new['awaiting_time'] = (df_new['AppointmentDay'] - df_new['ScheduledDay']).dt.days
df_new.head(50)

#drop the data less than 0 days
df_new = df_new[df_new['awaiting_time'] >= 0]
df_new.head(50)

df_new = df_new.reset_index(drop = True)
df_new.tail(5)

df_new.describe()

df_new.info()

df_new.hist(figsize = (11, 8));

df_new.Age[df_new.No_show_new == 0].mean()

df_new.Age[df_new.No_show_new == 1].mean()

df_new.Age[df_new.No_show_new == 0].hist(alpha = 0.5, label = 'show up')
df_new.Age[df_new.No_show_new == 1].hist(alpha = 0.5, label = 'no show')
plt.title("Histogram of Show-Up Situation")
plt.xlabel("Age")
plt.ylabel("Case number");
plt.legend();

median_show = df_new.groupby('No_show_new').Age.median()
median_show

no_show_population = df_new.loc[df_new.No_show_new == 1].shape[0]
no_show_population

show_up_population = df_new.loc[df_new.No_show_new == 0].shape[0]
show_up_population

show_up_population/no_show_population

df_new.groupby(['SMS_received','No_show_new']).size()

df_new.groupby(['SMS_received','No_show_new']).size().unstack()

#get the proportions of the two different groups
df_new.groupby(['SMS_received','No_show_new']).size().unstack().agg(lambda x: x/x.sum())

#plot the proportions of the data
df_new.groupby(['SMS_received','No_show_new']).size().unstack().agg(lambda x: x/x.sum()).plot(kind = 'bar', rot = 0)
labels = ['day 1', 'day2']

#plt.bar(locations, heights, tick_label = labels)
#plt.title('Overtimeâ€“Waiting Trade-offs for Two Days');

df_new.head()

df_new.awaiting_time.describe()

#create a histogram to find the relation between awaiting time and population
df_new.awaiting_time[df_new.No_show_new == 0].hist(alpha = 0.5, label = 'day1', figsize = (20,5))
df_new.awaiting_time[df_new.No_show_new == 1].hist(alpha = 0.5, label = 'day2', figsize = (10,5))

plt.title("Histogram  Show-Up Situation by Awaiting ")
plt.xlabel("Awaiting mean")
plt.ylabel("Case Number")
plt.legend();

#create a bar chart
locations = [1, 2]
heights = df_new.groupby('No_show_new').awaiting_time.mean()
labels = ['No Show','Show Up']

plt.bar(locations, heights, tick_label = labels)
plt.title('Average Awaiting Days by Different Attandence')
plt.xlabel('People Show Up or Not')
plt.ylabel('Average Awaiting Days');

locations = [1, 2]
heights = df_new.groupby('No_show_new').awaiting_time.median()
labels = ['No Show','Show Up']

plt.bar(locations, heights, tick_label = labels)
plt.title('Average Awaiting Days by Different Attandence')
plt.xlabel('People Show Up or Not')
plt.ylabel('Average Awaiting Days');